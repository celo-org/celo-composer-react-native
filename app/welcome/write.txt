import { Image, Linking, StyleSheet } from "react-native";

import { Text, View, ParallaxScrollView } from "@/components";

import {
  useReadContract,
  useActiveAccount,
  useSendAndConfirmTransaction,
} from "thirdweb/react";
import { balanceOf, claimTo, getNFT } from "thirdweb/extensions/erc721";
import { client, contract } from "@/constants/thirdweb";
import { shortenAddress } from "thirdweb/utils";
import { resolveScheme } from "thirdweb/storage";
// import { ThemedButton } from "@/components/ThemedButton";
import { Link } from "expo-router";
import { uploadMobile } from "thirdweb/storage";
// import DocumentPicker from "react-native-document-picker";
import { getContract, sendTransaction } from "thirdweb";
import { mintTo } from "thirdweb/extensions/erc721";
import { useState } from "react";

export default function WriteScreen() {
  return (
    <ParallaxScrollView
      headerBackgroundColor={{ light: "#A1CEDC", dark: "#1D3D47" }}
      headerImage={
        <Image
          source={require("@/assets/images/title.png")}
          style={styles.reactLogo}
        />
      }
    >
      <View style={styles.titleContainer}>
        <Text>Transactions</Text>
      </View>
      <View style={{ gap: 2 }}>
        <Text>useSendTransaction()</Text>
        <Text>
          Hook to submit transactions onchain from the connected wallet.
        </Text>
      </View>
      <WriteSection />
      <View style={{ height: 12 }} />
      <UploadSection />
    </ParallaxScrollView>
  );
}

function WriteSection() {
  const account = useActiveAccount();
  const sendMutation = useSendAndConfirmTransaction();
  const balanceQuery = useReadContract(balanceOf, {
    contract,
    owner: account?.address!,
    queryOptions: { enabled: !!account },
  });
  const nftQuery = useReadContract(getNFT, {
    contract,
    tokenId: 1n,
  });

  const mint = async () => {
    if (!account) return;
    sendMutation.mutate(
      claimTo({
        contract,
        quantity: 1n,
        to: account.address,
      })
    );
  };

  return (
    <>
      {account ? (
        <>
          <View style={{ gap: 4 }}>
            <Text>
              Wallet: <Text>{shortenAddress(account.address)}</Text>
            </Text>
            <Text>
              NFTs owned: <Text>{balanceQuery.data?.toString()}</Text>
            </Text>
          </View>
          {nftQuery.data && (
            <View style={{ justifyContent: "center", alignItems: "center" }}>
              <Image
                width={250}
                height={250}
                source={{
                  uri: `${resolveScheme({
                    client,
                    uri: nftQuery.data.metadata.image || "",
                  })}`,
                }}
              />
            </View>
          )}
          {/* <ThemedButton
            onPress={mint}
            title="Mint"
            loading={sendMutation.isPending}
            loadingTitle="Minting..."
          /> */}
          {sendMutation.error && (
            <Text style={{ color: "red" }}>{sendMutation.error.message}</Text>
          )}
        </>
      ) : (
        <>
          <Text>
            <Link href="(tabs)">
              <Text>Connect</Text>
            </Link>{" "}
            a wallet to perform transactions
          </Text>
        </>
      )}
    </>
  );
}

function UploadSection() {
  const [uri, setUri] = useState<string>();
  return (
    <>
      <View style={styles.titleContainer}>
        <Text>IPFS</Text>
      </View>
      <View style={{ gap: 2 }}>
        <Text>uploadMobile()</Text>
        <Text>Utility function to upload files to IPFS.</Text>
      </View>
      {/* <ThemedButton
        title="Upload File"
        onPress={async () => {
          try {
            const res = await DocumentPicker.pick({
              type: [DocumentPicker.types.allFiles],
            });
            const upload = await uploadMobile({
              client,
              files: [
                {
                  name: res[0].name,
                  uri: res[0].uri,
                  type: res[0].type,
                },
              ],
              uploadWithoutDirectory: true,
            });
            setUri(upload[0]);
          } catch (err) {
            if (DocumentPicker.isCancel(err)) {
              console.log("User cancelled the picker");
            } else {
              throw err;
            }
          }
        }}
      /> */}
      <Text
        onPress={() => {
          if (!uri) return;
          Linking.openURL(uri.replace("ipfs://", "https://ipfs.io/ipfs/"));
        }}
      >
        {uri && `Uploaded ${uri.slice(0, 25)}...`}
      </Text>
    </>
  );
}

const styles = StyleSheet.create({
  titleContainer: {
    flexDirection: "row",
    alignItems: "center",
    gap: 8,
  },
  stepContainer: {
    gap: 8,
    marginBottom: 8,
  },
  reactLogo: {
    height: "100%",
    width: "100%",
    bottom: 0,
    left: 0,
    position: "absolute",
  },
});
